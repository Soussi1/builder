module.exports=function(e){var t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(a,r,function(t){return e[t]}.bind(null,r));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=7)}([function(e,t,n){var a=n(1),r=n(4);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};a(r,o);e.exports=r.locals||{}},function(e,t,n){"use strict";var a,r=function(){return void 0===a&&(a=Boolean(window&&document&&document.all&&!window.atob)),a},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function l(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},a=[],r=0;r<e.length;r++){var o=e[r],c=t.base?o[0]+t.base:o[0],s=n[c]||0,u="".concat(c," ").concat(s);n[c]=s+1;var m=l(u),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==m?(i[m].references++,i[m].updater(d)):i.push({identifier:u,updater:h(d,t),references:1}),a.push(u)}return a}function s(e){var t=document.createElement("style"),a=e.attributes||{};if(void 0===a.nonce){var r=n.nc;r&&(a.nonce=r)}if(Object.keys(a).forEach((function(e){t.setAttribute(e,a[e])})),"function"==typeof e.insert)e.insert(t);else{var i=o(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var u,m=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function d(e,t,n,a){var r=n?"":a.media?"@media ".concat(a.media," {").concat(a.css,"}"):a.css;if(e.styleSheet)e.styleSheet.cssText=m(t,r);else{var o=document.createTextNode(r),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}function p(e,t,n){var a=n.css,r=n.media,o=n.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),o&&btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=a;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(a))}}var f=null,b=0;function h(e,t){var n,a,r;if(t.singleton){var o=b++;n=f||(f=s(t)),a=d.bind(null,n,o,!1),r=d.bind(null,n,o,!0)}else n=s(t),a=p.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return a(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;a(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=r());var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var a=0;a<n.length;a++){var r=l(n[a]);i[r].references--}for(var o=c(e,t),s=0;s<n.length;s++){var u=l(n[s]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}n=o}}}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",a=e[3];if(!a)return n;if(t&&"function"==typeof btoa){var r=(i=a,l=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(c," */")),o=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([r]).join("\n")}var i,l,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,a){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(a)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(var l=0;l<e.length;l++){var c=[].concat(e[l]);a&&r[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},function(e){e.exports=JSON.parse('[{"day":"2021-07-19T09:20:00.687Z","value":607.61},{"day":"2021-07-19T09:25:00.687Z","value":607.5},{"day":"2021-07-19T09:30:00.687Z","value":607.7},{"day":"2021-07-19T09:35:00.687Z","value":607.61},{"day":"2021-07-19T09:40:00.687Z","value":607.51},{"day":"2021-07-19T09:45:00.687Z","value":607.39},{"day":"2021-07-19T09:50:00.687Z","value":607.41},{"day":"2021-07-19T09:55:00.687Z","value":607.58}]')},function(e,t,n){(t=n(2)(!1)).push([e.i,'.indicatorCell {\n    font-size: 18px;\n    font-family: "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS", sans-serif;\n    font-weight: bold;\n    color: rgb(0, 0, 0);\n    \n}\n  \n.cellContent {\ntext-align: center;\n\n}\n\n.cellContainer {\n    height: 35px;\n    width: 100%;\n    position: relative;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.05s ease-in-out;\n    box-shadow: -2px 2px 1px -1px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%);\n    /* transition: transform 1s cubic-bezier(0.25, 0.45, 0.45, 0.95); */\n}\n.cellContainer:hover {\n    /* transform: translate(-1%, -1%) scale(1.05); */\n    transform: scale(1.05);\n    cursor: pointer;\n    \n}\n\n.supCellContainer{\n    height: 35px;\n    width: 100%;\n    position: relative;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.05s ease-in-out;\n    box-shadow: -2px 2px 1px -1px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%);\n    /* transition: transform 1s cubic-bezier(0.25, 0.45, 0.45, 0.95); */\n}\n\n.headerCellContainer{\n    height: 50px;\n    width: 100%;\n    position: relative;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.05s ease-in-out;\n    box-shadow: -2px 2px 1px -1px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%);\n}\n.rowCellContainer{\n    height: 35px;\n    width: 100%;\n    position: relative;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.05s ease-in-out;\n    box-shadow: -2px 2px 1px -1px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%);\n}\n\n\n.titlesRow:hover{\n    cursor: pointer;\n    color:black\n}\n\n.dx-treelist-text-content{\n    width: 100%\n}\n\n#site{\n    max-height: 700px;\n}',""]),e.exports=t},function(e,t,n){var a=n(1),r=n(6);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};a(r,o);e.exports=r.locals||{}},function(e,t,n){(t=n(2)(!1)).push([e.i,"#chart {\n    height: 100%;\n    width: 100%;\n}",""]),e.exports=t},function(e,t,n){"use strict";n.r(t);n(0);var a=function(e,t,n,a,r){return function(t){for(var n,a=0,r="",o="",i=(t.column.name,(n=t).data[n.column.dataField]),l=0;l<i.length;l++)void 0!==i[l]&&t.column.caption===i[l].label&&t.column.name===i[l].domain&&(a=i[l].trunc,r=i[l].unit,o=i[l].hexcode);return e.createElement("div",{className:"cellContainer",style:{background:o,borderRadius:"3px"}},e.createElement("div",{className:"cellContent"},e.createElement("span",{className:"indicatorCell",style:{color:"white"}},a," ",r)))}},r=(n(5),n(3)),o=function(e,t,n,a,o,i){return function(t){return e.createElement(i.DevExChart,{id:"chart",dataSource:r},e.createElement(i.DevExChartSeries,{valueField:"value",argumentField:"day",name:"Capacité Totale Recommandé",type:"line",color:"#ffaa66"}),e.createElement(i.DevExChartArgumentAxis,null,e.createElement(i.DevExChartLabel,{format:"shortTime"})),e.createElement(i.DevExChartValueAxis,{name:"value"},e.createElement(i.DevExChartTitle,{text:"Valeurs, GHz"},e.createElement(i.DevExChartFont,{color:"#ffaa66"}))),e.createElement(i.DevExChartTitle,{text:"IT-RES"},e.createElement(i.DevExChartSubtitle,{text:"Analyses de capacité générées|CPU|Demande|Capacité totale recommandée (GHz)"})),e.createElement(i.DevExChartTooltip,{container:".dx-popup-content",enabled:!0,customizeTooltip:function(e){return{text:"".concat(e.argumentText,"<br/>").concat(e.valueText)}}}),e.createElement(i.DevExChartExport,{enabled:!0}),e.createElement(i.DevExChartZoomAndPan,{argumentAxis:"both",valueAxis:"both"}),e.createElement(i.DevExChartScrollBar,{visible:!0}))}};function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],a=!0,r=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(a=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);a=!0);}catch(e){r=!0,o=e}finally{try{a||null==l.return||l.return()}finally{if(r)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return s(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}t.default=function(e,t,n,r,s,u){return function(m){var d=c(e.useState([0]),2),p=d[0],f=d[1],b=c(e.useState([0]),2),h=b[0],v=b[1],y=c(e.useState([0]),2),x=y[0],E=y[1],g=c(e.useState([0]),2),_=g[0],C=g[1],O=c(e.useState([0]),2),N=O[0],S=O[1],T=c(e.useState(0),2),w=T[0],R=T[1],I=c(e.useState(!1),2),D=I[0],k=I[1],j=c(e.useState([0]),2),M=(j[0],j[1],{site:[{resource_name:"name",id:"id",parent:"parent",props:[]}]}),A={type:"FeatureCollection",features:[]};e.useEffect((function(){var e;P("performance","MLB"),J("performance"),B("performance"),e=" select * from bytel_meteo.style;",s.post("grafana",{methode:"POST",path:"tsdb/query",body:{queries:[{datasourceId:parseInt(r.datasources[0]),rawSql:e,format:"table"}]}}).then((function(e){return e.json()})).then((function(e){return S(e.response.results.A.tables[0].rows)})),function(){var e="select geojson from bytel_meteo.region";s.post("grafana",{methode:"POST",path:"tsdb/query",body:{queries:[{datasourceId:parseInt(r.datasources[0]),rawSql:e,format:"table"}]}}).then((function(e){return e.json()})).then((function(e){return f(e.response.results.A.tables[0].rows)}))}()}),[]);var F=a(e,t,n,r,s),L=o(e,t,n,r,s,u);function P(e,t){var n="SELECT dm.resource_name, med.type,med.domain,med.label, TRUNC(cast(dm.value as decimal),2) as value, dm.unit, c.hexcode, '-1' as parent FROM bytel_meteo.matrix_definition mad JOIN bytel_meteo.dashboard_metric dm ON mad.metric_key = dm.metric_key JOIN bytel_meteo.metric_definition med ON mad.metric_key = med.metric_key JOIN bytel_meteo.color c ON dm.color = c.name WHERE resource_name IN (SELECT c.name FROM bytel_meteo.site s JOIN bytel_meteo.link l ON s.site_id = l.site_id JOIN bytel_meteo.cluster c ON l.cluster_id = c.cluster_id WHERE s.trigramme = '"+t+"') and med.type<>'List' AND med.type='"+e+"' AND time_bucket('5 minute', timestamp_utc) = (select max(time_bucket('5 minute', timestamp_utc)) from bytel_meteo.dashboard_metric) GROUP BY dm.resource_name, med.label, dm.value,c.hexcode,type,med.domain,dm.unit UNION SELECT dam.resource_name, med.type,med.domain,med.label, TRUNC(cast(dam.value as decimal) ,2) as value, dam.unit, c.hexcode, dam.application_name as parent FROM bytel_meteo.matrix_definition mad JOIN bytel_meteo.dashboard_application_metric dam ON mad.metric_key = dam.metric_key JOIN bytel_meteo.metric_definition med ON mad.metric_key = med.metric_key JOIN bytel_meteo.color c ON dam.color = c.name WHERE dam.resource_name IN (SELECT vm.name FROM bytel_meteo.site s JOIN bytel_meteo.link l ON s.site_id = l.site_id JOIN bytel_meteo.application a ON l.application_id = a.application_id JOIN bytel_meteo.virtual_machine vm ON a.application_id = vm.application_id WHERE s.trigramme = '"+t+"') and med.type<>'List' AND med.type='"+e+"' AND time_bucket('5 minute', timestamp_utc) = (select max(time_bucket('5 minute', timestamp_utc)) from bytel_meteo.dashboard_application_metric) GROUP BY dam.resource_name, med.label, dam.value,c.hexcode,type,med.domain,dam.unit,dam.application_name UNION SELECT app.name,null as type,null as domain,null as label,null as value,null as unit,null as hexcode,c.name as parent FROM bytel_meteo.application app JOIN bytel_meteo.link l ON app.application_id=l.application_id JOIN bytel_meteo.cluster c ON l.cluster_id=c.cluster_id JOIN bytel_meteo.site s ON l.site_id=s.site_id WHERE s.trigramme='"+t+"' AND app.name<>'NO APP' ORDER BY resource_name, type, domain,label";s.post("grafana",{methode:"POST",path:"tsdb/query",body:{queries:[{datasourceId:parseInt(r.datasources[0]),rawSql:n,format:"table"}]}}).then((function(e){return e.json()})).then((function(e){return v(e.response.results.A.tables[0].rows)}))}function J(e){var t="SELECT med.domain,count(med.domain) FROM bytel_meteo.matrix_definition mad LEFT JOIN bytel_meteo.metric_definition med ON mad.metric_key = med.metric_key where type='"+e+"' group  by type, med.domain ORDER BY type, med.domain";s.post("grafana",{methode:"POST",path:"tsdb/query",body:{queries:[{datasourceId:parseInt(r.datasources[0]),rawSql:t,format:"table"}]}}).then((function(e){return e.json()})).then((function(e){return E(e.response.results.A.tables[0].rows)}))}function B(e){var t="SELECT type,med.domain,med.label FROM bytel_meteo.matrix_definition mad LEFT JOIN bytel_meteo.metric_definition med ON mad.metric_key = med.metric_key where type = '"+e+"' and med.label <> 'Nombre de CPU utilisables' ORDER BY  type, med.domain, med.label";s.post("grafana",{methode:"POST",path:"tsdb/query",body:{queries:[{datasourceId:parseInt(r.datasources[0]),rawSql:t,format:"table"}]}}).then((function(e){return e.json()})).then((function(e){return C(e.response.results.A.tables[0].rows)}))}p.map((function(e){void 0!==e[0]&&A.features.push(JSON.parse(e[0]))}));var q={resource_name:"",id:"",parent:"",props:[]};if(void 0!==h&&void 0!==h[0]){q.resource_name=h[0][0];for(var U=0;U<h.length;U++){var z={type:"",domain:"",label:"",trunc:0,unit:"",hexcode:""};q.resource_name===h[U][0]?(z.type=h[U][1],z.domain=h[U][2],z.label=h[U][3],z.trunc=h[U][4],z.unit=h[U][5],z.hexcode=h[U][6],q.id=h[U][0],q.parent=h[U][7],q.props.push(z)):(M.site.push(q),(q={resource_name:"",id:"",parent:"",props:[]}).resource_name=h[U][0],U-=1)}M.site.push(q)}function W(t){var a=t.children,r=t.value,o=t.index,c=l(t,["children","value","index"]);return e.createElement("div",i({role:"tabpanel",hidden:r!==o,id:"simple-tabpanel-".concat(o),"aria-labelledby":"simple-tab-".concat(o)},c),r===o&&e.createElement(n.Box,{p:3},e.createElement(n.Typography,null,a)))}function H(e){return{id:"simple-tab-".concat(e),"aria-controls":"simple-tabpanel-".concat(e)}}function Z(t){return e.createElement("div",{className:"supCellContainer",style:{background:"#1396c1",borderRadius:"5px",height:"100px"}},e.createElement("span",{style:{color:"white",fontWeight:"bold"}},t.data.column.caption))}function G(t){var n="",a="",r="";return N.map((function(e){e[0]===t.data.column.caption&&(n=e[1],a=e[3],r=e[4])})),e.createElement("div",{className:"supCellContainer",style:{background:n,borderRadius:"3px"}},e.createElement("div",{className:"supCellContent"},e.createElement("span",{style:{fontFamily:a,color:"white",fontWeight:r}},t.data.column.caption)))}function V(t){var n="",a="",r="";return N.map((function(e){e[0]===t.data.column.name&&(n=e[1],a=e[3],r=e[4])})),e.createElement("div",{className:"headerCellContainer",style:{background:n,borderRadius:"3px"}},e.createElement("div",{className:"cellContent"},e.createElement("span",{style:{fontFamily:a,color:"white",fontWeight:r}},t.data.column.caption)))}function Y(t){return e.createElement("div",{className:"rowCellContainer",style:{background:"#1396c1",borderRadius:"3px"}},e.createElement("div",{className:"cellContent"},e.createElement("span",{className:"titlesRow",style:{color:"white",fontWeight:"bold"}},e.createElement("a",{href:"#"},t.value))))}var $=e.useCallback((function(e){"main"!==e.column.name&&(k(!0),console.log(e.key+"/"+e.column.caption+"/"+e.column.name))}),[D]);function K(){k(!1)}function Q(e){return e.props[0].trunc}function X(){var t=[],n=0,a=0;return x.map((function(r){t.push(e.createElement(u.DevExTreeColumn,{caption:r[0],headerCellComponent:G,alignment:"center",allowFixing:!0,allowSorting:!1},function(t,n,a){for(var r=[],o=t;o<n;o++)void 0!==_[o]&&_[o][1]===a&&r.push(e.createElement(u.DevExTreeColumn,{caption:_[o][2],headerCellComponent:V,dataField:"props",cellRender:F,alignment:"center",allowFixing:!0,allowSorting:!1,name:a,minWidth:250,calculateSortValue:Q}));return r}(n,r[1]+n+2,r[0]))),a=r[1],n=n+a-1})),t}function ee(e){var t=e.attribute("nom");return{text:"".concat(t),color:"#5b6cf0"}}function te(e){e.forEach((function(e){var t=e.attribute("color");e.applySettings({color:t})}))}var ne=e.useCallback((function(t){var n=t.mapdata;return e.createElement(u.DevExVectorMap,{id:"vector-map",zoomFactor:25},e.createElement(u.DevExMapSize,{height:1e3}),e.createElement(u.DevExMapLayer,{dataSource:n,customize:te}),e.createElement(u.DevExMapTooltip,{enabled:!0,customizeTooltip:ee},e.createElement(u.DevExMapBorder,{visible:!0}),e.createElement(u.DevExMapFont,{color:"#fff"})),e.createElement(u.DevExMapExport,{enabled:!0}))})),ae=e.memo((function(t){var n=t.onClick;return e.createElement(e.Fragment,null,e.createElement(u.DevExTreeList,{id:"site",dataSource:M.site,rootValue:-1,showBorders:!0,showRowLines:!0,allowColumnReordering:!0,allowColumnResizing:!0,columnResizingMode:"widget",style:{padding:"0px"},onCellClick:n,keyExpr:"id",parentIdExpr:"parent"},e.createElement(u.DevExTreeColumnFixing,{enabled:!0}),e.createElement(u.DevExTreeScrolling,{mode:"standard",useNative:!0}),e.createElement(u.DevExTreeColumnChooser,{enabled:!1,mode:"select"}),e.createElement(u.DevExPopup,{visible:D,onHiding:K,dragEnabled:!1,closeOnOutsideClick:!0,showCloseButton:!0,showTitle:!0,contentRender:L,title:"Information",container:".grid-container",resizeEnabled:!0,width:800,height:600}),e.createElement(u.DevExTreeColumn,{caption:"CLUSTERS D'APPLICATIONS",dataField:"resource_name",fixed:!0,headerCellComponent:Z,cellRender:Y,minWidth:255,alignment:"center",allowSorting:!1,name:"main"}),X()))}));return console.log(A),e.createElement(e.Fragment,null,e.createElement(n.AppBar,{position:"static",color:"default"},e.createElement(n.Tabs,{value:w,onChange:function(e,t){R(t)}},e.createElement(n.Tab,i({className:"tabTitle",label:"Performance"},H(0),{onClick:function(){P("performance","MLB"),J("performance"),B("performance")}})),e.createElement(n.Tab,i({className:"tabTitle",label:"Capacité"},H(1),{onClick:function(){P("capacity","MLB"),J("capacity"),B("capacity")}})),e.createElement(n.Tab,i({className:"tabTitle",label:"conformité"},H(2))))),e.createElement(W,{value:w,index:0},e.createElement(n.TableContainer,{component:n.Paper},e.createElement(ae,{onClick:$}))),e.createElement(W,{value:w,index:1},e.createElement(ne,{mapdata:A})),e.createElement(W,{value:w,index:3}))}}}]).default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,